% Example: Animate a session evolving over time in 3D with a colormap
% Assuming you have data: X, Y, Z (each a 1D array) and a colormap array C

% Extract embeddings
embeddings_3d = squeeze(land_off.sessions{2}.embeddings_3d);
binned_hipp_angle = land_off.sessions{2}.binned_hipp_angle;
binned_high_vel_rad = deg2rad(land_off.sessions{2}.binned_high_vel);
x = embeddings_3d(:, 1);
y = embeddings_3d(:, 2);
z = embeddings_3d(:, 3);
nPoints = length(x);

% Process binned hippocampal angle for colormap
binned_hipp_angle = mod(binned_hipp_angle, 2*pi); % Mod 2*pi to wrap around
C = binned_hipp_angle; % Use as color data

% Create the figure for the animation
fig = figure('KeyPressFcn', @keyPressCallback); % Attach callback for pausing
hold on;
grid on;
title('Session Evolution Over Time');
xlabel('X Axis');
ylabel('Y Axis');
zlabel('Z Axis');
xlim([min(x), max(x)]); % Adjust according to your data range
ylim([min(y), max(y)]); % Adjust according to your data range
zlim([min(z), max(z)]); % Adjust according to your data range
view(3);

% Initialize the scatter plot
scatterHandle = scatter3(x(1), y(1), z(1), 50, C(1), 'filled');

% Colormap and colorbar setup
colormap('jet'); % Apply the colormap
colorbar; % Add a colorbar to show the color scale
caxis([min(C), max(C)]); % Match color scale to the range of C

% Store pause state in the figure's appdata
setappdata(fig, 'isPaused', false);

% Time step (100ms = 0.1 seconds)
timeStep = 0.1;

% Add text annotation for displaying binned_high_vel values
textPositionX = min(x) + 0.5; % Offset from data points
textPositionY = max(y)+0.75;
textPositionZ = max(z);
valueText = text(textPositionX, textPositionY, textPositionZ, ...
    sprintf('Rat Velocity (deg/s): %.2f', binned_high_vel(1)), ...
    'FontSize', 14, 'FontWeight', 'bold', 'Color', 'k');

% Animate points
for i = 1:nPoints
    % Check if the animation is paused
    while getappdata(fig, 'isPaused')
        pause(0.1); % Wait until unpaused
    end

    % Add the next point to the scatter plot
    scatter3(x(i), y(i), z(i), 50, C(i), 'filled');
    
    % Update the text annotation with the current binned_high_vel value
    valueText.String = sprintf('Rat Velocity (deg/s): %.2f', binned_high_vel(i));

    % Update the plot dynamically
    drawnow;

    % Pause for the time step
    pause(timeStep);
end

% Optional: Save the animation as a video
videoFile = VideoWriter('SessionEvolutionWithColormap.avi');
open(videoFile);

% Iterate through frames to save the video
for i = 1:nPoints
    scatter3(x(i), y(i), z(i), 50, C(i), 'filled');
    
    % Update the text annotation
    valueText.String = sprintf('Rat Velocity: %.2f', binned_high_vel(i));
    
    frame = getframe(gcf);
    writeVideo(videoFile, frame);
end

close(videoFile);
disp('Animation complete and saved as SessionEvolutionWithColormap.avi');

% Callback function for pausing and resuming animation
function keyPressCallback(~, event)
    % Access the figure's appdata to toggle the pause state
    if strcmp(event.Key, 'space') % Check for spacebar press
        isPaused = getappdata(gcf, 'isPaused'); % Get current state
        setappdata(gcf, 'isPaused', ~isPaused); % Toggle state
        if ~isPaused
            disp('Animation paused');
        else
            disp('Animation resumed');
        end
    end
end
